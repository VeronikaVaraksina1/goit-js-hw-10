{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["'use strict';\n\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst input = document.querySelector('#datetime-picker');\n\nconst btnStart = document.querySelector('button[data-start]');\nbtnStart.disabled = true;\n\nconst daysTimer = document.querySelector('span[data-days]');\nconst hoursTimer = document.querySelector('span[data-hours]');\nconst minsTimer = document.querySelector('span[data-minutes]');\nconst secsTimer = document.querySelector('span[data-seconds]');\n\nlet userSelectedDate = '';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n\n    if (options.defaultDate > selectedDates[0]) {\n      btnStart.disabled = true;\n      return window.alert('Please choose a date in the future');\n    } else {\n      btnStart.disabled = false;\n      userSelectedDate = selectedDates[0];\n    }\n  },\n};\n\nconst datePicker = flatpickr(input, options);\n\ninput.addEventListener('focus', () => {\n  datePicker.config.defaultDate = new Date();\n  console.log(datePicker.config.defaultDate);\n});\n\nbtnStart.addEventListener('click', () => {\n  const currentDateTime = new Date().getTime();\n  const selectedDateTime = userSelectedDate.getTime();\n\n  setInterval(() => {\n    let different = selectedDateTime - currentDateTime - 1000;\n    console.log(different);\n\n    const result = convertMs(different);\n\n    daysTimer.textContent = `${result.days}`;\n    hoursTimer.textContent = `${result.hours}`;\n    minsTimer.textContent = `${result.minutes}`;\n    secsTimer.textContent = `${result.seconds}`;\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["input","btnStart","daysTimer","hoursTimer","minsTimer","secsTimer","userSelectedDate","options","selectedDates","datePicker","flatpickr","currentDateTime","selectedDateTime","different","result","convertMs","ms","days","hours","minutes","seconds"],"mappings":"mIAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EAEjDC,EAAW,SAAS,cAAc,oBAAoB,EAC5DA,EAAS,SAAW,GAEpB,MAAMC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAY,SAAS,cAAc,oBAAoB,EACvDC,EAAY,SAAS,cAAc,oBAAoB,EAE7D,IAAIC,EAAmB,GAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGrB,GAFA,QAAQ,IAAIA,EAAc,EAAE,EAExBD,EAAQ,YAAcC,EAAc,GACtC,OAAAP,EAAS,SAAW,GACb,OAAO,MAAM,oCAAoC,EAExDA,EAAS,SAAW,GACpBK,EAAmBE,EAAc,EAEpC,CACH,EAEMC,EAAaC,EAAUV,EAAOO,CAAO,EAE3CP,EAAM,iBAAiB,QAAS,IAAM,CACpCS,EAAW,OAAO,YAAc,IAAI,KACpC,QAAQ,IAAIA,EAAW,OAAO,WAAW,CAC3C,CAAC,EAEDR,EAAS,iBAAiB,QAAS,IAAM,CACvC,MAAMU,EAAkB,IAAI,KAAM,EAAC,QAAO,EACpCC,EAAmBN,EAAiB,UAE1C,YAAY,IAAM,CAChB,IAAIO,EAAYD,EAAmBD,EAAkB,IACrD,QAAQ,IAAIE,CAAS,EAErB,MAAMC,EAASC,EAAUF,CAAS,EAElCX,EAAU,YAAc,GAAGY,EAAO,OAClCX,EAAW,YAAc,GAAGW,EAAO,QACnCV,EAAU,YAAc,GAAGU,EAAO,UAClCT,EAAU,YAAc,GAAGS,EAAO,SACnC,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}